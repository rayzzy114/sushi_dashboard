import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –û–º—Å–∫–µ",
    page_icon="üç£",
    layout="wide",
    initial_sidebar_state="expanded"
)

def get_font_setup():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–π —à—Ä–∏—Ñ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤
    font_dir = Path("assets/fonts")
    has_custom_fonts = False
    
    if font_dir.exists():
        woff2_files = list(font_dir.glob("*.woff2"))
        if woff2_files:
            has_custom_fonts = True
    
    if has_custom_fonts:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        font_css = """
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
        """
        font_family = "Inter"
        font_status = "Inter (Google Fonts) + —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Fonts –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        font_css = """
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
        """
        font_family = "Inter"
        font_status = "Inter (Google Fonts)"
    
    return font_css, font_family, font_status

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞
font_css, font_family, font_status = get_font_setup()

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ Streamlit
STREAMLIT_COLORS = {
    'primary': '#1E3A8A',      # —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
    'secondary': '#3B82F6',    # —Å–∏–Ω–∏–π
    'success': '#10B981',      # –∑–µ–ª–µ–Ω—ã–π
    'warning': '#F59E0B',      # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    'info': '#6366F1',         # –∏–Ω–¥–∏–≥–æ
    'purple': '#8B5CF6',       # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'dark': '#1F2937',         # —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    'light': '#F3F4F6',        # —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    'accent': '#DC2626'        # –∫—Ä–∞—Å–Ω—ã–π
}

# –°—Ç–∏–ª–∏ CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
st.markdown(f"""
{font_css}
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    :root {{
        --primary-color: {STREAMLIT_COLORS['primary']};
        --secondary-color: {STREAMLIT_COLORS['secondary']};
        --text-color: {STREAMLIT_COLORS['dark']};
        --bg-light: {STREAMLIT_COLORS['light']};
    }}
    
    * {{
        font-family: "{font_family}", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", sans-serif !important;
    }}
    
    .main-header {{
        font-size: 3.5rem;
        background: linear-gradient(45deg, {STREAMLIT_COLORS['primary']}, {STREAMLIT_COLORS['secondary']});
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: 700;
        font-family: "{font_family}", sans-serif !important;
    }}
    
    .metric-card {{
        background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 5px solid var(--primary-color);
        box-shadow: 0 4px 20px rgba(30, 58, 138, 0.1);
        font-family: "{font_family}", sans-serif !important;
        transition: transform 0.2s ease;
    }}
    
    .metric-card:hover {{
        transform: translateY(-2px);
        box-shadow: 0 8px 30px rgba(30, 58, 138, 0.15);
    }}
    
    .sidebar .sidebar-content {{
        background: linear-gradient(180deg, #f1f5f9 0%, #e2e8f0 100%);
        font-family: "{font_family}", sans-serif !important;
    }}
    
    .stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {{
        font-family: "{font_family}", sans-serif !important;
        font-weight: 600;
        font-size: 18px;
        color: #1F2937;
    }}
    
    .stTabs [data-baseweb="tab-list"] button {{
        background-color: transparent;
        border-radius: 10px 10px 0 0;
        border: none;
        padding: 12px 20px;
        margin-right: 4px;
        transition: all 0.3s ease;
    }}
    
    .stTabs [data-baseweb="tab-list"] button:hover {{
        background: linear-gradient(135deg, rgba(30, 58, 138, 0.1), rgba(59, 130, 246, 0.1));
        transform: translateY(-2px);
    }}
    
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {{
        background: linear-gradient(135deg, {STREAMLIT_COLORS['primary']}, {STREAMLIT_COLORS['secondary']});
        color: white !important;
        box-shadow: 0 4px 15px rgba(30, 58, 138, 0.3);
    }}
    
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] [data-testid="stMarkdownContainer"] p {{
        color: white !important;
        font-weight: 700;
    }}
    
    .stSelectbox label, .stCheckbox label, .stRadio label {{
        font-family: "{font_family}", sans-serif !important;
        font-weight: 500;
        color: #1F2937;
    }}
    
    .stDataFrame, .stTable {{
        font-family: "{font_family}", sans-serif !important;
    }}
    
    h1, h2, h3, h4, h5, h6 {{
        font-family: "{font_family}", sans-serif !important;
        font-weight: 600;
        color: #1F2937;
    }}
    
    .stMetric {{
        font-family: "{font_family}", sans-serif !important;
    }}
    
    .stMetric > div > div > div > div {{
        font-size: 1.2rem;
        font-weight: 600;
    }}
    
    .stInfo, .stSuccess, .stWarning, .stError {{
        font-family: "{font_family}", sans-serif !important;
        border-radius: 10px;
    }}
    
    .element-container {{
        font-family: "{font_family}", sans-serif !important;
    }}
    
    /* –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
    .js-plotly-plot .plotly .main-svg {{
        border-radius: 10px;
    }}
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {{
        from {{ opacity: 0; transform: translateY(20px); }}
        to {{ opacity: 1; transform: translateY(0); }}
    }}
    
    .element-container {{
        animation: fadeIn 0.5s ease-out;
    }}
</style>
""", unsafe_allow_html=True)

def get_streamlit_layout():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Å—Ç–∏–ª–µ Streamlit"""
    return {
        'font': dict(size=16, family=f'"{font_family}", Arial, sans-serif'),
        'title_font': dict(size=24, family=f'"{font_family}", Arial, sans-serif', color="#1F2937"),
        'plot_bgcolor': 'rgba(0,0,0,0)',
        'paper_bgcolor': 'rgba(0,0,0,0)',
        'margin': dict(l=60, r=60, t=100, b=60),
        'hoverlabel': dict(
            bgcolor="white",
            bordercolor=STREAMLIT_COLORS['primary'],
            font_size=14, 
            font_family=f'"{font_family}", Arial, sans-serif'
        ),
        'colorway': list(STREAMLIT_COLORS.values())
    }

@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        df = pd.read_excel('–¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫—É —Å—É—à–∏.xlsx')
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def create_custom_chart(fig, title_color=None):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –≥—Ä–∞—Ñ–∏–∫—É"""
    layout_settings = get_streamlit_layout()
    if title_color:
        layout_settings['title_font']['color'] = title_color
    
    fig.update_layout(**layout_settings)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–Ω–∏
    fig.update_layout(
        showlegend=True,
        legend=dict(
            bgcolor="rgba(255,255,255,0.8)",
            bordercolor=STREAMLIT_COLORS['light'],
            borderwidth=1,
            font=dict(family=f'"{font_family}", Arial, sans-serif', size=12)
        )
    )
    
    return fig

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    st.markdown('<h1 class="main-header">üç£ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –û–º—Å–∫–µ</h1>', unsafe_allow_html=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ä–∏—Ñ—Ç–µ
    st.sidebar.markdown(f"**üé® –®—Ä–∏—Ñ—Ç:** {font_status}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    
    if df is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ '–¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫—É —Å—É—à–∏.xlsx'")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.markdown("## üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞")
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    color_scheme = st.sidebar.selectbox(
        "üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:",
        ["–Ø—Ä–∫–∞—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", "–ü–∞—Å—Ç–µ–ª—å–Ω–∞—è", "–ú–æ–Ω–æ—Ö—Ä–æ–º", "–ú–æ—Ä—Å–∫–∞—è"],
        index=0
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    if color_scheme == "–ü–∞—Å—Ç–µ–ª—å–Ω–∞—è":
        STREAMLIT_COLORS.update({
            'primary': '#FFB5B5', 'secondary': '#B5E7E1', 'success': '#B5D3F0'
        })
    elif color_scheme == "–ú–æ–Ω–æ—Ö—Ä–æ–º":
        STREAMLIT_COLORS.update({
            'primary': '#555555', 'secondary': '#777777', 'success': '#999999'
        })
    elif color_scheme == "–ú–æ—Ä—Å–∫–∞—è":
        STREAMLIT_COLORS.update({
            'primary': '#006A6B', 'secondary': '#00A8CC', 'success': '#40E0D0'
        })
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if st.sidebar.checkbox("üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        with st.expander("üìã –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            st.dataframe(df, use_container_width=True)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if st.sidebar.checkbox("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"):
        with st.expander("üóÇÔ∏è –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫", expanded=False):
            for i, col in enumerate(df.columns):
                st.write(f"`{i}:` {col}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    st.markdown("### üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric(
            label="üìã –ó–∞–ø–∏—Å–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö",
            value=len(df),
            delta="—Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric(
            label="üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞",
            value=len(df.columns),
            delta="–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        non_null_ratio = (df.count().sum() / (len(df) * len(df.columns)) * 100)
        st.metric(
            label="‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
            value=f"{non_null_ratio:.1f}%",
            delta="–∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        st.metric(
            label="üî¢ –ß–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫",
            value=len(numeric_cols),
            delta="–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    tab1, tab2, tab3, tab4 = st.tabs([
        "üéØ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", 
        "üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", 
        "üí∞ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
        "üìà –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
    ])
    
    with tab1:
        st.markdown("### üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        col1_tab1, col2_tab1 = st.columns(2)
        
        with col1_tab1:
            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–µ–π –ø–æ—Å–µ—â–µ–Ω–∏—è
            if '—Ü–µ–ª—å –ø–æ—Å–µ—â–µ–Ω–∏—è' in df.columns and '–∫–æ–ª-–≤–æ' in df.columns:
                purpose_data = df[['—Ü–µ–ª—å –ø–æ—Å–µ—â–µ–Ω–∏—è', '–∫–æ–ª-–≤–æ']].dropna()
                if not purpose_data.empty:
                    fig_purpose = px.pie(
                        purpose_data, 
                        values='–∫–æ–ª-–≤–æ', 
                        names='—Ü–µ–ª—å –ø–æ—Å–µ—â–µ–Ω–∏—è',
                        title="üéØ –¶–µ–ª–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
                        color_discrete_sequence=[STREAMLIT_COLORS['primary'], STREAMLIT_COLORS['secondary'], STREAMLIT_COLORS['success']]
                    )
                    fig_purpose.update_traces(
                        textposition='inside', 
                        textinfo='percent+label', 
                        textfont_size=15,
                        hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
                    )
                    fig_purpose = create_custom_chart(fig_purpose)
                    st.plotly_chart(fig_purpose, use_container_width=True)
        
        with col2_tab1:
            # –ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π
            if '–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞—é—Ç —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã' in df.columns:
                frequency_col = df.columns[df.columns.str.contains('–∫–æ–ª-–≤–æ')][1] if len(df.columns[df.columns.str.contains('–∫–æ–ª-–≤–æ')]) > 1 else '–∫–æ–ª-–≤–æ'
                frequency_data = df[['–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞—é—Ç —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', frequency_col]].dropna()
                if not frequency_data.empty:
                    fig_freq = px.bar(
                        frequency_data,
                        x='–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞—é—Ç —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã',
                        y=frequency_col,
                        title="üìä –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
                        color_discrete_sequence=[STREAMLIT_COLORS['info']]
                    )
                    fig_freq.update_layout(
                        xaxis_tickangle=-45,
                        xaxis_title="–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π",
                        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤"
                    )
                    fig_freq.update_traces(
                        hovertemplate='<b>%{x}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{y}<extra></extra>'
                    )
                    fig_freq = create_custom_chart(fig_freq)
                    st.plotly_chart(fig_freq, use_container_width=True)
    
    with tab2:
        st.markdown("### üè™ –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–Ω–∏—è –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        col1_tab2, col2_tab2 = st.columns(2)
        
        with col1_tab2:
            # –¢–æ–ø –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
            if '–ö–∞–∫–∏–µ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –≥. –û–º—Å–∫  –∑–Ω–∞—é—Ç' in df.columns and '–∫–æ–ª-–≤–æ.1' in df.columns:
                known_data = df[['–ö–∞–∫–∏–µ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –≥. –û–º—Å–∫  –∑–Ω–∞—é—Ç', '–∫–æ–ª-–≤–æ.1']].dropna()
                if not known_data.empty:
                    known_data = known_data.sort_values('–∫–æ–ª-–≤–æ.1', ascending=True)
                    fig_known = px.bar(
                        known_data,
                        x='–∫–æ–ª-–≤–æ.1',
                        y='–ö–∞–∫–∏–µ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –≥. –û–º—Å–∫  –∑–Ω–∞—é—Ç',
                        orientation='h',
                        title="üèÜ –ò–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –û–º—Å–∫–µ",
                        color='–∫–æ–ª-–≤–æ.1',
                        color_continuous_scale=[[0, STREAMLIT_COLORS['warning']], [1, STREAMLIT_COLORS['secondary']]]
                    )
                    fig_known.update_layout(
                        xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                        yaxis_title="–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"
                    )
                    fig_known = create_custom_chart(fig_known)
                    st.plotly_chart(fig_known, use_container_width=True)
        
        with col2_tab2:
            # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ
            if '–í –∫–∞–∫–∏–µ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –≥. –û–º—Å–∫ –±—ã—á–Ω–æ —Ö–æ–¥—è—Ç' in df.columns and '–∫–æ–ª-–≤–æ.2' in df.columns:
                visit_data = df[['–í –∫–∞–∫–∏–µ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –≥. –û–º—Å–∫ –±—ã—á–Ω–æ —Ö–æ–¥—è—Ç', '–∫–æ–ª-–≤–æ.2']].dropna()
                if not visit_data.empty:
                    visit_data = visit_data.sort_values('–∫–æ–ª-–≤–æ.2', ascending=False)
                    fig_visit = px.pie(
                        visit_data,
                        values='–∫–æ–ª-–≤–æ.2',
                        names='–í –∫–∞–∫–∏–µ —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –≥. –û–º—Å–∫ –±—ã—á–Ω–æ —Ö–æ–¥—è—Ç',
                        title="üçΩÔ∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
                        color_discrete_sequence=[STREAMLIT_COLORS['success'], STREAMLIT_COLORS['purple'], STREAMLIT_COLORS['warning'], STREAMLIT_COLORS['info']]
                    )
                    fig_visit.update_traces(
                        textposition='inside', 
                        textinfo='percent+label', 
                        textfont_size=15,
                        hovertemplate='<b>%{label}</b><br>–ü–æ—Å–µ—â–µ–Ω–∏–π: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
                    )
                    fig_visit = create_custom_chart(fig_visit)
                    st.plotly_chart(fig_visit, use_container_width=True)
        
        # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
        if '–ö–∞–∫–æ–π —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω  –ø–æ—Å–µ—â–∞—é—Ç —á–∞—â–µ –≤—Å–µ–≥–æ' in df.columns and '–∫–æ–ª-–≤–æ.3' in df.columns:
            popular_data = df[['–ö–∞–∫–æ–π —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω  –ø–æ—Å–µ—â–∞—é—Ç —á–∞—â–µ –≤—Å–µ–≥–æ', '–∫–æ–ª-–≤–æ.3']].dropna()
            if not popular_data.empty:
                fig_popular = px.treemap(
                    popular_data,
                    path=['–ö–∞–∫–æ–π —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω  –ø–æ—Å–µ—â–∞—é—Ç —á–∞—â–µ –≤—Å–µ–≥–æ'],
                    values='–∫–æ–ª-–≤–æ.3',
                    title="üåü –°–∞–º—ã–µ —á–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞–µ–º—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
                    color='–∫–æ–ª-–≤–æ.3',
                    color_continuous_scale=[[0, STREAMLIT_COLORS['light']], [0.5, STREAMLIT_COLORS['primary']], [1, STREAMLIT_COLORS['dark']]]
                )
                fig_popular = create_custom_chart(fig_popular)
                st.plotly_chart(fig_popular, use_container_width=True)
    
    with tab3:
        st.markdown("### üí∞ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        
        # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å —Ü–µ–Ω–∞–º–∏
        price_columns = []
        for col in df.columns:
            if any(word in col.lower() for word in ['—Ü–µ–Ω–∞', '—Ü–µ–Ω—ã', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä—É–±']):
                price_columns.append(col)
        
        if price_columns:
            st.info(f"üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏: {', '.join(price_columns[:3])}...")
            
            col1_tab3, col2_tab3 = st.columns(2)
            
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            max_price_cols = [col for col in df.columns if '–≤—ã—à–µ' in col.lower() and '—Ü–µ–Ω' in col.lower()]
            min_price_cols = [col for col in df.columns if '–Ω–∏–∂–µ' in col.lower() and '—Ü–µ–Ω' in col.lower()]
            fair_price_cols = [col for col in df.columns if '—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤' in col.lower() and '—Ü–µ–Ω' in col.lower()]
            
            with col1_tab3:
                if max_price_cols:
                    max_price_data = df[max_price_cols[0]].dropna()
                    if not max_price_data.empty:
                        fig_max_price = px.histogram(
                            x=max_price_data,
                            title="üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–ª–µ–º–∞—è —Ü–µ–Ω–∞",
                            nbins=10,
                            color_discrete_sequence=[STREAMLIT_COLORS['primary']]
                        )
                        fig_max_price.update_layout(
                            xaxis_title="–¶–µ–Ω–∞ (—Ä—É–±.)",
                            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
                            bargap=0.1
                        )
                        fig_max_price = create_custom_chart(fig_max_price)
                        st.plotly_chart(fig_max_price, use_container_width=True)
                else:
                    st.info("üí≠ –î–∞–Ω–Ω—ã–µ –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            with col2_tab3:
                if min_price_cols:
                    min_price_data = df[min_price_cols[0]].dropna()
                    if not min_price_data.empty:
                        fig_min_price = px.histogram(
                            x=min_price_data,
                            title="‚ú® –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞",
                            nbins=10,
                            color_discrete_sequence=[STREAMLIT_COLORS['success']]
                        )
                        fig_min_price.update_layout(
                            xaxis_title="–¶–µ–Ω–∞ (—Ä—É–±.)",
                            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
                            bargap=0.1
                        )
                        fig_min_price = create_custom_chart(fig_min_price)
                        st.plotly_chart(fig_min_price, use_container_width=True)
                else:
                    st.info("üí≠ –î–∞–Ω–Ω—ã–µ –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞
            if fair_price_cols:
                fair_price_data = df[fair_price_cols[0]].dropna()
                if not fair_price_data.empty:
                    fig_fair_price = px.box(
                        y=fair_price_data,
                        title="‚öñÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π —Ü–µ–Ω—ã",
                        color_discrete_sequence=[STREAMLIT_COLORS['secondary']]
                    )
                    fig_fair_price.update_layout(yaxis_title="–¶–µ–Ω–∞ (—Ä—É–±.)")
                    fig_fair_price = create_custom_chart(fig_fair_price)
                    st.plotly_chart(fig_fair_price, use_container_width=True)
            
            # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            if price_columns:
                st.markdown("#### üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω")
                numeric_price_cols = df[price_columns].select_dtypes(include=[np.number]).columns
                if len(numeric_price_cols) > 0:
                    price_data = df[numeric_price_cols].describe().round(2)
                    st.dataframe(price_data, use_container_width=True)
        else:
            st.warning("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞.")
    
    with tab4:
        st.markdown("### üìà –ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        
        # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        satisfaction_columns = []
        for col in df.columns:
            if any(word in col.lower() for word in ['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä', '–æ—Ü–µ–Ω–∫', '–±–∞–ª–ª', '—Ä–µ–π—Ç–∏–Ω–≥']):
                satisfaction_columns.append(col)
        
        if satisfaction_columns:
            st.info(f"üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏: {', '.join(satisfaction_columns[:3])}...")
            
            col1_tab4, col2_tab4 = st.columns(2)
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            general_satisfaction_cols = [col for col in df.columns if '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º' in col]
            characteristics_cols = [col for col in df.columns if '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫' in col.lower()]
            importance_cols = [col for col in df.columns if '–≤–∞–∂–Ω–æ—Å—Ç—å' in col.lower()]
            
            with col1_tab4:
                if general_satisfaction_cols and any('–∫–æ–ª-–≤–æ' in col for col in df.columns):
                    count_col = [col for col in df.columns if '–∫–æ–ª-–≤–æ.4' in col]
                    if count_col:
                        satisfaction_data = df[[general_satisfaction_cols[0], count_col[0]]].dropna()
                        if not satisfaction_data.empty:
                            fig_satisfaction = px.bar(
                                satisfaction_data,
                                x=general_satisfaction_cols[0],
                                y=count_col[0],
                                title="üòä –û–±—â–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                                color_discrete_sequence=[STREAMLIT_COLORS['success']]
                            )
                            fig_satisfaction.update_layout(
                                xaxis_tickangle=-45,
                                xaxis_title="–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤"
                            )
                            fig_satisfaction = create_custom_chart(fig_satisfaction)
                            st.plotly_chart(fig_satisfaction, use_container_width=True)
                else:
                    st.info("üí≠ –î–∞–Ω–Ω—ã–µ –æ–± –æ–±—â–µ–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            with col2_tab4:
                if characteristics_cols and '–±–∞–ª–ª' in df.columns:
                    char_data = df[[characteristics_cols[0], '–±–∞–ª–ª']].dropna()
                    if not char_data.empty:
                        fig_char = px.scatter(
                            char_data,
                            x=characteristics_cols[0],
                            y='–±–∞–ª–ª',
                            title="‚≠ê –û—Ü–µ–Ω–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
                            size='–±–∞–ª–ª',
                            color='–±–∞–ª–ª',
                            color_continuous_scale=[[0, STREAMLIT_COLORS['warning']], [1, STREAMLIT_COLORS['primary']]]
                        )
                        fig_char.update_layout(
                            xaxis_tickangle=-45,
                            xaxis_title="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
                            yaxis_title="–û—Ü–µ–Ω–∫–∞ (–±–∞–ª–ª)"
                        )
                        fig_char = create_custom_chart(fig_char)
                        st.plotly_chart(fig_char, use_container_width=True)
                else:
                    st.info("üí≠ –î–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –í–∞–∂–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            if importance_cols and '%' in df.columns:
                importance_data = df[[importance_cols[0], '%']].dropna()
                if not importance_data.empty:
                    fig_importance = px.bar(
                        importance_data,
                        x='%',
                        y=importance_cols[0],
                        orientation='h',
                        title="üéØ –í–∞–∂–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (%)",
                        color='%',
                        color_continuous_scale=[[0, STREAMLIT_COLORS['light']], [1, STREAMLIT_COLORS['info']]]
                    )
                    fig_importance.update_layout(
                        xaxis_title="–í–∞–∂–Ω–æ—Å—Ç—å (%)",
                        yaxis_title="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
                    )
                    fig_importance = create_custom_chart(fig_importance)
                    st.plotly_chart(fig_importance, use_container_width=True)
            
            # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
            if satisfaction_columns:
                st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –æ—Ü–µ–Ω–∫–∞–º")
                numeric_satisfaction = df[satisfaction_columns].select_dtypes(include=[np.number])
                if not numeric_satisfaction.empty:
                    satisfaction_stats = numeric_satisfaction.describe().round(2)
                    st.dataframe(satisfaction_stats, use_container_width=True)
        else:
            st.warning("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("---")
    st.markdown("### üéâ –ò—Ç–æ–≥–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    col1_extra, col2_extra, col3_extra = st.columns(3)
    
    with col1_extra:
        st.info("""
        **üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å—É—à–∏ –≤ –û–º—Å–∫–µ**
        
        –î–∞—à–±–æ—Ä–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —Å—É—à–∏-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        """)
    
    with col2_extra:
        st.success("""
        **üéØ –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è**
        
        ‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π  
        ‚Ä¢ –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è  
        ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞  
        ‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –±—Ä–µ–Ω–¥–æ–≤
        """)
    
    with col3_extra:
        st.warning("""
        **üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**
        
        ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã  
        ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏  
        ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è  
        ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """)

if __name__ == "__main__":
    main() 
